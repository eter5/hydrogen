"use strict";(self.webpackChunkdocs_v_1=self.webpackChunkdocs_v_1||[]).push([[282],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=p(n),c=a,h=d["".concat(s,".").concat(c)]||d[c]||u[c]||o;return n?r.createElement(h,i(i({ref:t},m),{},{components:n})):r.createElement(h,i({ref:t},m))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},7072:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={},i="Form",l={unversionedId:"components/framework/form",id:"components/framework/form",title:"Form",description:"Experimental feature",source:"@site/docs/components/framework/form.md",sourceDirName:"components/framework",slug:"/components/framework/form",permalink:"/hydrogen-v1/components/framework/form",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"hydrogen",previous:{title:"FileSessionStorage",permalink:"/hydrogen-v1/components/framework/filesessionstorage"},next:{title:"Link",permalink:"/hydrogen-v1/components/framework/link"}},s={},p=[{value:"HTML <code>form</code> element",id:"html-form-element",level:2},{value:"Hydrogen <code>Form</code> component",id:"hydrogen-form-component",level:2},{value:"Client validation and feedback",id:"client-validation-and-feedback",level:2},{value:"Example code",id:"example-code",level:2},{value:"Hidden fields",id:"hidden-fields",level:2},{value:"Form in server components",id:"form-in-server-components",level:2},{value:"<code>Form</code> requires an API route",id:"form-requires-an-api-route",level:3},{value:"Props",id:"props",level:2},{value:"Component type",id:"component-type",level:2},{value:"Related framework topics",id:"related-framework-topics",level:2}],m={toc:p},d="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"form"},"Form"),(0,a.kt)("aside",{class:"note beta"},(0,a.kt)("h4",null,"Experimental feature"),(0,a.kt)("p",null,"Hydrogen Form is an experimental feature. As a result, functionality is subject to change. You can provide feedback on this feature by ",(0,a.kt)("a",{href:"https://github.com/Shopify/hydrogen/issues"},"submitting an issue in GitHub"),".")),(0,a.kt)("p",null,"Within a Hydrogen app, ",(0,a.kt)("a",{parentName:"p",href:"https://shopify.dev/custom-storefronts/hydrogen/react-server-components/work-with-rsc#fetching-data-on-the-server"},"React Server Components")," are used to fetch data and ",(0,a.kt)("a",{parentName:"p",href:"https://shopify.dev/custom-storefronts/hydrogen/routing#api-routes"},"API routes")," are used to mutate data. The ",(0,a.kt)("inlineCode",{parentName:"p"},"Form")," component provides a declarative way to send data to API routes and re-render server components. The component mimics the functionality of a native ",(0,a.kt)("inlineCode",{parentName:"p"},"<form>")," element, but it provides an enhanced user experience with client-side JavaScript."),(0,a.kt)("h2",{id:"html-form-element"},"HTML ",(0,a.kt)("inlineCode",{parentName:"h2"},"form")," element"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Form")," component builds on the native HTML ",(0,a.kt)("inlineCode",{parentName:"p"},"<form>")," element. The following is an example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="index.html"',title:'"index.html"'},'<form action="/login" method="post">\n  <label> Username <input type="text" name="username" /> </label>\n  <label> Password <input type="password" name="password" /> </label>\n  <button type="submit">Submit</button>\n</form>\n')),(0,a.kt)("p",null,"This example HTML doesn't run any JavaScript. When ",(0,a.kt)("strong",{parentName:"p"},"Submit")," is clicked, the browser sends a ",(0,a.kt)("inlineCode",{parentName:"p"},"POST")," request to ",(0,a.kt)("inlineCode",{parentName:"p"},"/login")," with each form field encoded. The browser also reloads the entire page to display the server's response. Learn more about ",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Learn/Forms"},"native HTML forms"),"."),(0,a.kt)("h2",{id:"hydrogen-form-component"},"Hydrogen ",(0,a.kt)("inlineCode",{parentName:"h2"},"Form")," component"),(0,a.kt)("p",null,"Hydrogen's ",(0,a.kt)("inlineCode",{parentName:"p"},"Form")," component mimics the functionality of a native ",(0,a.kt)("inlineCode",{parentName:"p"},"<form>")," element, while providing an enhanced experience with client-side JavaScript."),(0,a.kt)("p",null,"Native HTML forms work without JavaScript. However, JavaScript can provide the following improvements:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Performance"),": JavaScript prevents the entire page from reloading to display responses from the server."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"UX"),": JavaScript provides client-side validation and feedback. Client-side validation is quicker than making a round trip to the server, and feedback helps the user know when the form is in the process of submitting.")),(0,a.kt)("h2",{id:"client-validation-and-feedback"},"Client validation and feedback"),(0,a.kt)("p",null,"The best user experience has client-side validation and gives user feedback while the form is submitting. This requires a client component."),(0,a.kt)("h2",{id:"example-code"},"Example code"),(0,a.kt)("p",null,"The following example rewrites the ",(0,a.kt)("a",{parentName:"p",href:"#html-form-element"},"example form element")," by substituting the native HTML with a ",(0,a.kt)("inlineCode",{parentName:"p"},"Form")," component that's imported from Hydrogen."),(0,a.kt)("p",null,"Because the ",(0,a.kt)("inlineCode",{parentName:"p"},"Form")," is within a client component, ",(0,a.kt)("inlineCode",{parentName:"p"},"children")," can be a render prop. This enables you to give users feedback while the form is submitting."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="LoginForm.client.jsx"',title:'"LoginForm.client.jsx"'},'import {Form} from \'@shopify/hydrogen/experimental\';\n\nexport default function Login() {\n  const url = useUrl();\n  return (\n    <Form action="/login" method="post">\n      {({loading}) => (\n        <>\n          <label>\n            Username <input type="text" name="username" />\n          </label>\n          <label>\n            Password <input type="password" name="password" />\n          </label>\n          {url.searchParams.get(\'error\') ? (\n            <h2 className="text-red-700">Invalid username or password</h2>\n          ) : null}\n          <button type="submit" disabled={loading}>\n            Submit\n          </button>\n        </>\n      )}\n    </Form>\n  );\n}\n')),(0,a.kt)("h2",{id:"hidden-fields"},"Hidden fields"),(0,a.kt)("p",null,"You can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"Form")," component for any mutation that doesn't include a text field."),(0,a.kt)("p",null,"For example, the following uses a ",(0,a.kt)("inlineCode",{parentName:"p"},"Form")," component for adding items an item to a cart:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="Product.server.jsx"',title:'"Product.server.jsx"'},'import {Form} from \'@shopify/hydrogen/experimental\';\n\nexport default function Product({product}) {\n  return (\n    <ProductDetails>\n      <Form action="/addToCart" method="post">\n        <input type="hidden" name="productId" value={product.id} />\n        <button type="submit">Add to cart</button>\n      </Form>\n    </ProductDetails>\n  );\n}\n')),(0,a.kt)("p",null,"The hidden input field for the ",(0,a.kt)("inlineCode",{parentName:"p"},"productId")," is sent to the server when the ",(0,a.kt)("strong",{parentName:"p"},"Add to cart")," button is clicked. The API route at ",(0,a.kt)("inlineCode",{parentName:"p"},"/addToCart")," can contain all the logic to add the product to the cart and re-render the page. The button is actionable before the page fully loads and the JavaScript is hydrated."),(0,a.kt)("h2",{id:"form-in-server-components"},"Form in server components"),(0,a.kt)("p",null,"We recommend that you use ",(0,a.kt)("inlineCode",{parentName:"p"},"Form")," in client components for the best user experience. However, you can use ",(0,a.kt)("inlineCode",{parentName:"p"},"Form")," in server components if required. The following is an example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="login.server.jsx"',title:'"login.server.jsx"'},'import {Form} from \'@shopify/hydrogen/experimental\';\n\nexport default function Login() {\n  return (\n    <Form action="/login" method="post">\n      <label>\n        Username <input type="text" name="username" />\n      </label>\n      <label>\n        Password <input type="password" name="password" />\n      </label>\n      <button type="submit">Submit</button>\n    </Form>\n  );\n}\n')),(0,a.kt)("h3",{id:"form-requires-an-api-route"},(0,a.kt)("inlineCode",{parentName:"h3"},"Form")," requires an API route"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"action")," attribute must point to an API route. The following is an example implementation:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="login.server.jsx"',title:'"login.server.jsx"'},"export async function api(request, {session}) {\n  // Access the form data\n  const data = await request.formData();\n  const username = data.get('username');\n  const password = data.get('password');\n\n  // Find the user\n  const userId = await getUser(username, password);\n\n  if (!userId) {\n    // We couldn't find the user.\n    // Re-render the login page with a login error displayed\n    await session.set('loginError', true);\n    return new Request('/login');\n  }\n\n  // Save the user to the session\n  await session.set('userId', userId);\n\n  // Forward the user to the account page\n  return new Request('/account');\n}\n")),(0,a.kt)("p",null,"Read data in the API route from the ",(0,a.kt)("inlineCode",{parentName:"p"},"Form")," by using the ",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/FormData"},(0,a.kt)("inlineCode",{parentName:"a"},"FormData"))," API. The API route must respond with a ",(0,a.kt)("inlineCode",{parentName:"p"},"new Request()"),". This renders the server components for the given page. You can re-render the current page, or render an entirely different page in the app."),(0,a.kt)("p",null,"In the previous example, when the user is not found, the current page is re-rendered with an error set on the session. The following code updates the server component to render the login error:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="login.server.jsx"',title:'"login.server.jsx"'},'import {Form, useFlashSession} from \'@shopify/hydrogen/experimental\';\n\nexport default function Login() {\n  // `useFlashSession` also clears the value after reading it. This way,\n  // if the user refreshes the page, the validation error goes away.\n  const loginError = useFlashSession(\'loginError\');\n\n  return (\n    <Form action="/login" method="post">\n      <label>\n        Username <input type="text" name="username" />\n      </label>\n      <label>\n        Password <input type="password" name="password" />\n      </label>\n      {loginError ? (\n        <h2 className="text-red-700">Invalid username or password</h2>\n      ) : null}\n      <button type="submit">Submit</button>\n    </Form>\n  );\n}\n')),(0,a.kt)("p",null,"The page initially loads without a session ",(0,a.kt)("inlineCode",{parentName:"p"},"loginError")," value. If the login mutation fails, then the server components re-render with the ",(0,a.kt)("inlineCode",{parentName:"p"},"loginError")," session value and display a message to the user. Because the component uses ",(0,a.kt)("inlineCode",{parentName:"p"},"useFlashSession")," instead of ",(0,a.kt)("inlineCode",{parentName:"p"},"useSession"),", the value is subsequently cleared. If the user refreshes the page, then the validation error goes away."),(0,a.kt)("h2",{id:"props"},"Props"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Form")," component shares the same props that are available to the ",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form"},"native ",(0,a.kt)("inlineCode",{parentName:"a"},"<form>")," element")," with the following additions:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"action"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"string")),(0,a.kt)("td",{parentName:"tr",align:null},"The path to the API route that the form submits to. The API route must respond with a ",(0,a.kt)("inlineCode",{parentName:"td"},"new Request()"),".")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"encType?"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"string")),(0,a.kt)("td",{parentName:"tr",align:null},"The MIME type of the form submission. ",(0,a.kt)("inlineCode",{parentName:"td"},"multipart/form-data")," is not yet supported.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"onSubmit?"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"Function")),(0,a.kt)("td",{parentName:"tr",align:null},"A callback to intercept a submission event. The form doesn't submit if ",(0,a.kt)("inlineCode",{parentName:"td"},"event.preventDefault()")," is called.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"children?"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"ReactNode")," or ",(0,a.kt)("inlineCode",{parentName:"td"},"({loading, error}) => ReactNode")),(0,a.kt)("td",{parentName:"tr",align:null},"Either pass any ReactNode, or a function that returns a ReactNode. That function will receive ",(0,a.kt)("inlineCode",{parentName:"td"},"loading")," and ",(0,a.kt)("inlineCode",{parentName:"td"},"error")," parameters. ",(0,a.kt)("inlineCode",{parentName:"td"},"loading")," is ",(0,a.kt)("inlineCode",{parentName:"td"},"true")," while forms are being submitted. ",(0,a.kt)("inlineCode",{parentName:"td"},"error")," is populated when there's an error communicating with the server.")))),(0,a.kt)("h2",{id:"component-type"},"Component type"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Form")," component is a client component, so it renders on the client. For more information about component types, refer to ",(0,a.kt)("a",{parentName:"p",href:"https://shopify.dev/custom-storefronts/hydrogen/react-server-components"},"React Server Components"),"."),(0,a.kt)("h2",{id:"related-framework-topics"},"Related framework topics"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://shopify.dev/custom-storefronts/hydrogen/routing/manage-routes#concatenate-requests"},"Forms and API routes"))))}u.isMDXComponent=!0}}]);